注意何时sign数组清0，注意no_confict嵌套，注意两个位数和为10位但其中一个值超过5位数时也属于越界。
使用了sign[10]数组，如果某一个数字i已经出现，则sign[i] = 1

int used[10];

int judge( int a, int b )
{
	if ( b > 98765 ) return 0;
	for ( int i = 0 ; i < 10 ; ++ i )
		used[i] = 0;
	if ( a < 10000 ) used[0] = 1;
	while ( a ) {
		used[a%10] = 1;
		a /= 10;
	}
	while ( b ) {
		used[b%10] = 1;
		b /= 10;
	}
	int sum = 0;
	for ( int i = 0 ; i < 10 ; ++ i )
		sum += used[i];
	return (sum == 10);
}

这种判断要简洁得多
#include <cstdio>
#include <cstring>
const int maxn = 10;
int sign[10];
int count_num(int n) {
	int ln = 1;
	while((n /= 10) > 0) ln++;
	return ln;
}
bool over_boundary(int a, int b) {
	int la = 0, lb = 0;
	la = count_num(a);
	lb = count_num(b);
	if(la + lb > 10) return true; // step over the boundary
	else if(la > 5 || lb > 5) return true;
	return false; // in the boundary
}
bool no_confict(int n) {
	if(!sign[n%10]) sign[n%10] = 1;
	else return false;
	if(!sign[n/10%10]) sign[n/10%10] = 1;
	else return false;
	if(!sign[n/100%10]) sign[n/100%10] = 1;
	else return false;
	if(!sign[n/1000%10]) sign[n/1000%10] = 1;
	else return false;
	if(!sign[n/10000%10]) sign[n/10000%10] = 1;
	else return false;
	return true;
}
int main() {
	int abcde;
	int N, first = 1;
	while(scanf("%d", &N) != EOF && N != 0) {
		if(!first) {
			printf("\n");
		}else first = 0;
		int ok = 0;
		for(int i = 1234; i < 99999; i++) {
			memset(sign, 0, sizeof(sign));
			abcde = N * i;
			if(over_boundary(abcde, i)) break;
			if(no_confict(i))
				if(no_confict(abcde)) {
					printf("%d / %05d = %d\n", abcde, i, N);
					ok = 1;
				}
		}
		if(!ok) printf("There are no solutions for %d.\n", N);
	}
	return 0;
}
