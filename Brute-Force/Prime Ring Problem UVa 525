素数环：使用dfs深度优先搜索，采用回溯法，遍历解答树，遇到错误便跳出，每一个位置上尝试所有数字（1除外），vis数组指示是否使用过。
#include <cstdio>
#include <cstring>
const int maxn = 20;
int N;
int isp[maxn*2+1];
int ans[maxn];
int vis[maxn];
int isPrime(int n) {
	for(int i = 2; i*i <= n; i++) {
		if(n%i == 0)
			return 0;
	}
	return 1;
}
void dfs(int cur) {
	if(cur == N && isp[ans[0]+ans[cur-1]]) {
		printf("%d", ans[0]);
		for(int i = 1; i < N; i++)
			printf(" %d", ans[i]);
		/*printf("\n%d", ans[0]);
		for(int i = N-1; i > 0; i--)
			printf(" %d", ans[i]);*/
		printf("\n");
		return;
	}
	for(int i = 2; i <= N; i++) {
		if(vis[i]) continue;
		ans[cur] = i;
		if(isp[ans[cur]+ans[cur-1]]) {
			vis[i] = 1;
			dfs(cur+1);
			vis[i] = 0;
		}
	}
}
int main() {
	// establish prime table
	for(int i = 2; i <= maxn*2; i++) isp[i] = isPrime(i);
	int cnt = 0;
	while(scanf("%d", &N) != EOF) {
		memset(vis, 0, sizeof(vis));
		if(cnt) printf("\n");
		printf("Case %d:\n", ++cnt);
		ans[0] = 1; vis[1] = 1;
		dfs(1);
	}
	return 0;
}
