动态规划刷表法：
用来更新表的状态cur必须为已经变为固定常数的状态（即之后再也不会更新这个状态cur了），这样的状态才能用来更新表。
状态的意义选择必须有意义，符合以上描述。

书中描述：dp(i,j)表示时刻i，在车站j，最少 还 需要等待多长时间
我的选择：dp(i,j)表示从时刻0，在车站1到达时刻i,车站j最少等待多长时间
异同：
书中更新过的状态之后不会再更新，而我的方法在更新过后还可能被更新，出现异常情况。

书中推荐以dp[i][j]结束的最长/短路

#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxn = 50 + 5;
const int maxT = 200 + 5;
const int maxt = 70 + 5;
const int INF = 1e9;
int dp[maxT][maxn]; // dp[i][j]: at time i, station j, minimum time spent in waiting
int have_train[maxT][maxn][2]; // 0: right, 1: left
int d[maxt];
void print(int t, int n) {
	for(int j = 1; j <= n; j++) {
		for(int i = 0; i <= t; i++)
			printf("%d ", dp[i][j]);
		printf("\n");
	}
	printf("\n");
}
int main() {
	freopen("input", "r", stdin);
	//freopen("output", "w", stdout);
	int N, cnt = 0;
	while(scanf("%d", &N) != EOF && N != 0) {
		int T, M1, M2;
		scanf("%d", &T);
		for(int i = 1; i < N; i++) scanf("%d", &d[i]);
		memset(have_train, 0, sizeof(have_train));
		scanf("%d", &M1);
		for(int i = 0; i < M1; i++) {
			int t; scanf("%d", &t);
			have_train[t][1][0] = 1;
			for(int j = 2; j <= N; j++) have_train[t+=d[j-1]][j][0] = 1;
		}
		scanf("%d", &M2);
		for(int i = 0; i < M2; i++) {
			int t; scanf("%d", &t);
			have_train[t][N][1] = 1;
			for(int j = N-1; j >= 1; j--) have_train[t+=d[j]][j][1] = 1;
		}

		//BOOK METHOD
		for(int i = 1; i <= N-1; i++) dp[T][i] = INF;
		dp[T][N] = 0; // least waiting time
		for(int i = T-1; i >= 0; i--)
			for(int j = 1; j <= N; j++) {
				dp[i][j] = dp[i+1][j] + 1; // D1
				//print(T, N);
				if(have_train[i][j][0] && j < N && i+d[j] <= T) {// D2
					dp[i][j] = min(dp[i][j], dp[i+d[j]][j+1]);
					//print(T, N);
				}
				if(have_train[i][j][1] && j > 1 && i+d[j-1] <= T) {// D3
					dp[i][j] = min(dp[i][j], dp[i+d[j-1]][j-1]);
					//print(T, N);
				}
			}
		if(dp[0][1] >= INF) printf("Case Number %d: impossible\n", ++cnt);
		else printf("Case Number %d: %d\n", ++cnt, dp[0][1]);

		/* MY METHOD
		for(int i = 0; i <= T; i++) dp[i][1] = i;
		for(int i = 0; i <= T; i++)
			for(int j = 2; j <= N; j++) dp[i][j] = INF;
		for(int j = 1; j <= N; j++)
			for(int i = 0; i <= T; i++) {
				dp[i+1][j] = min(dp[i][j] + 1, dp[i+1][j]); // D1: wait for a minute
				print(T, N);
				if(have_train[i][j][0] && j < N && i+d[j] <= T) {// D2: take a train directing right
					dp[i+d[j]][j+1] = min(dp[i][j], dp[i+d[j]][j+1]);
					print(T, N);
				}
				if(have_train[i][j][1] && j > 1 && i+d[j-1] <= T) {// D3: take a train directing left
					dp[i+d[j-1]][j-1] = min(dp[i][j], dp[i+d[j-1]][j-1]);
					print(T, N);
				}
			}
		if(dp[T][N] >= INF) printf("Case Number %d: impossible\n", ++cnt);
		else printf("Case Number %d: %d\n", ++cnt, dp[T][N]);
		*/
	}
	return 0;
}
