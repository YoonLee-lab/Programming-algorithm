Problem Description
当今世界，网络已经无处不在了，小度熊由于犯了错误，当上了度度公司的网络管理员，他手上有大量的 IP列表，小度熊想知道在某个固定的子网掩码下，有多少个网络地址。网络地址等于子网掩码与 IP 地址按位进行与运算后的结果，例如：

子网掩码：A.B.C.D

IP 地址：a.b.c.d

网络地址：(A&a).(B&b).(C&c).(D&d)
Input
第一行包含一个整数T，（1≤T≤50）代表测试数据的组数，

接下来T组测试数据。每组测试数据包含若干行，

第一行两个正整数N（1≤N≤1000,1≤M≤50）,M。接下来N行，每行一个字符串，代表一个 IP 地址，

再接下来M行，每行一个字符串代表子网掩码。IP 地址和子网掩码均采用 A.B.C.D的形式，其中A、B、C、D均为非负整数，且小于等于255。
Output
对于每组测试数据，输出两行：

第一行输出: "Case #i:" 。i代表第i组测试数据。

第二行输出测试数据的结果，对于每组数据中的每一个子网掩码，输出在此子网掩码下的网络地址的数量。
Sample Input
2
5 2
192.168.1.0
192.168.1.101
192.168.2.5
192.168.2.7
202.14.27.235
255.255.255.0
255.255.0.0
4 2
127.127.0.1
10.134.52.0
127.0.10.1
10.134.0.2
235.235.0.0
1.57.16.0
Sample Output
Case #1:
3
2
Case #2:
3
4

解析：“网络地址”或“网络号”是指子网掩码和某IP地址“与”运算之后的结果，如果IP1、IP2和子网掩码“与”的结果相同，则称为网络地址相同。
由于不同IP可能有相同子网掩码，因此我们使用STL的set来保存与运算之后的结果（unique属性，自动去重）。
由于IP定义为结构体，在使用set时需要重载<运算符，<在结构体中定义，不加const报错，表示不会修改类的成员变量。
STL对<要求严格，必须能够根据<推出>和==，注释掉的那部分行不通。

更好的办法：ip存为uint32类型，直接比较uint32类型的大小就可以判断是否重复。

#include <cstdio>
#include <cstring>
#include <string>
#include <iostream>
#include <set>
using namespace std;
const int maxn = 1000 + 10;
const int maxm = 50 + 5;
int N, M;
struct IP {
	int add1, add2, add3, add4;
	bool operator < (const IP &a) const {
		/*if(add1 < a.add1) return true;
		else if(add2 < a.add2) return true;
		else if(add3 < a.add3) return true;
		else return add4 < a.add4;*/
		if(add1 == a.add1) {
			if(add2 == a.add2) {
				if(add3 == a.add3) {
					return add4 < a.add4;
				}else {
					return add3 < a.add3;
				}
			}else {
				return add2 < a.add2;
			}
		}else {
			return add1 < a.add1;
		}
	}
}ip[maxn], ipm[maxm];
set<IP> aip;
//int count[maxm];
int main() {
	int T, cnt = 0;
	scanf("%d", &T);
	while(T--) {
		//memset(count, 0, sizeof(count));
		scanf("%d%d", &N, &M);
		for(int i = 1; i <= N; i++)
			scanf("%d.%d.%d.%d", &ip[i].add1, &ip[i].add2, &ip[i].add3, &ip[i].add4);
		for(int i = 1; i <= M; i++)
			scanf("%d.%d.%d.%d", &ipm[i].add1, &ipm[i].add2, &ipm[i].add3, &ipm[i].add4);
		printf("Case #%d:\n", ++cnt);
		for(int i = 1; i <= M; i++) {
			aip.clear();
			for(int j = 1; j <= N; j++) {
				IP tmp;
				tmp.add1 = ipm[i].add1 & ip[j].add1;
				tmp.add2 = ipm[i].add2 & ip[j].add2;
				tmp.add3 = ipm[i].add3 & ip[j].add3;
				tmp.add4 = ipm[i].add4 & ip[j].add4;
				aip.insert(tmp);
			}
			printf("%d\n", aip.size());
		}
	}
	return 0;
}
