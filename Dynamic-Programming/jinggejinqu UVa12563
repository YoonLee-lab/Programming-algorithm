这道题没什么思路，尝试写了下，发现问题很多，自己对01背包问题还没有弄清楚，最后从网上百度了答案，自己也一步一步认真思考了答案，写下对本题的理解：
这道题的目标是使t时间内唱歌数最大，而且最后还可以加一首劲歌金曲。状态使用01背包的状态，d(i,j)表示将i,i+1,i+2...首歌在j时间内最多可以唱几首，并写出唱歌的时长，边界：i>n时，d(i,j)=0。s[i][j]表示在状态(i,j)时能够唱最长多长时间的歌。可以得知d(1,t)>=d(1,t-1)>=...>=d(1,0)，但状态d(1,t)不能再唱劲歌金曲了，反而d(1,t-1)可以再唱一首，因此这种情况应判断到底该选择哪种状态。
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxn = 50 + 5;
const int maxt = 10000;
int v[maxn], s[maxn][maxt], d[maxn][maxt];
int sl, n, t;
int main() {
	int T, cnt = 0;
	scanf("%d", &T);
	while(T--) {
		scanf("%d%d", &n, &t);
		memset(v, 0, sizeof(v));
		memset(s, 0, sizeof(s));
		memset(d, 0, sizeof(d));
		for(int i = 1; i <= n; i++)
			scanf("%d", &v[i]);
		for(int i = n; i >= 1; i--) { 
			for(int j = 0; j <= t; j++) {
				d[i][j] = (i == n? 0 : d[i+1][j]);
				s[i][j] = s[i+1][j];
				if(j >= v[i]) {
					if(d[i][j] < d[i+1][j-v[i]] + 1) {
						d[i][j] = d[i+1][j-v[i]] + 1;
						s[i][j] = s[i+1][j-v[i]] + v[i];
					}else if(d[i][j] == d[i+1][j-v[i]] + 1)
						s[i][j] = max(s[i][j], s[i+1][j-v[i]] + v[i]);
				}
			}
		}
		if(d[1][t-1]+1 < d[1][t])
			printf("Case %d: %d %d\n", ++cnt, d[1][t], s[1][t]);
		else {
			int maxs = -1;
			for(int i = 0; i <= t-1; i++)
				if(d[1][i] == d[1][t-1])
					if(s[1][i] > maxs) maxs = s[1][i];
			printf("Case %d: %d %d\n", ++cnt, d[1][t-1]+1, maxs+678);
		}
	}
	return 0;
}
