0~N-1共N个点
想使用回溯法暴力枚举每种情况，然后找出最小值，奈何火候太浅，没办法写出，思路：vis数组存储访问过的点，(i,j)表示从(0,0)出发，走到(i,j)（为保证不重，i>j），终止是sum(vis) == N-2，此时在(N-2,j)，d+dist(N-2,N-1)+dist(j,N-1)即得到目前走法的结果。但i，j是同时并发变动的，虽然在递归时可以滤除一些不满足要求的状态，如(1,1)，(1,2)等，而且状态可以通过赋值1和赋值0表示是否访问过，d并不能回到从前的值，因此如果只累加d的话不能满足题意要求，要设置一个d数组，存储中间变量，但这样耗费空间太大，也太过复杂，未能实现。
使用了题目中给出的动态规划方法，状态定义d(i,j)表示当前位置分别是i和j，1~max(i,j)全部走过，还需要走的最少距离，i>j。
自然得到边界d(N-2,i)=dist(N-2,N-1)+dist(i,N-1)，i从0到N-3取值。为了做到不重不漏，d(i,j)可以转移到d(i+1,j)和d(i+1,i)，即要么i走到i+1，要么j走到i+1。所求的结果就是dist(0,1)+d(1,0)。
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;
const int maxn = 100 + 5;
//const double INF = 1e308;
//double cans, ans;
int N;
struct Point {
	int x, y;
	void f(int a, int b) {
		x = a; y = b;
	}
}p[maxn];
double d[maxn][maxn];
//int vis[maxn];
// distance
double dist(int a, int b) {
	Point pa = p[a], pb = p[b];
	return sqrt((double)(pa.x-pb.x)*(pa.x-pb.x) + (double)(pa.y-pb.y)*(pa.y-pb.y));
}
/*
// brute-force
void dp(int a, int b) { // a > b
	if(b >= a || vis[a] || vis[b]) return;
	int sum = 0;
	for(int i = 1; i < N-1; i++) sum += vis[i];
	if(sum == N-2) {
		d += dist(a, N-1) + dist(b, N-1);
		if(d < maxd) maxd = d;
	}else {
		d += dist(a);
		for(int i = a+1; i < N-1; i++) {
			vis[i-1] = 1;
			//dp(i, b);
			for(int j = b+1; j < N-1; j++) {
				dp(i, j);
			}
			vis[i-1] = 0;
		}
	}
}
*/
int main() {
	freopen("input", "r", stdin);
	int x, y;
	while(scanf("%d", &N) != EOF) {
		for(int i = 0; i < N; i++) {
			scanf("%d%d", &x, &y);
			p[i].f(x, y);
		}
		memset(d, 0, sizeof(d));
		//cans = 0, ans = INF;
		for(int i = 0; i < N-2; i++) // boundary
			d[N-2][i] = dist(N-2, N-1) + dist(i, N-1);
		for(int i = N-3; i >= 1; i--)
			for(int j = 0; j < i; j++)
				d[i][j] = min(d[i+1][j] + dist(i, i+1), d[i+1][i] + dist(j, i+1));
		printf("%.2lf\n", d[1][0] + dist(0, 1));
	}
	return 0;
}
