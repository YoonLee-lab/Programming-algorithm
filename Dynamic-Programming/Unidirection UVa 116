多决策问题：定义状态d(i,j)表示从(i,j)格出发到最后一列的最小开销，因此首先初始化最后一列，逆序循环到第一列得到找到每一个d(i,0)，最小的即为所求结果。
r(i,j-1)存储为了得到最小开销，在(i,j-1)点的下一跳（下一列的行数），因此最后一列不需要存储。
#include <cstdio>
#include <cstring>
const int maxm = 10 + 5;
const int maxn = 100 + 5;
const long long INF = 1e20;
int A[maxm][maxn];
long long d[maxm][maxn]; // minimum cost from d(i,j) to the end
int r[maxm][maxn-1]; // route, which store next step
int M, N;
int main() {
	while(scanf("%d%d", &M, &N) != EOF) {
		for(int i = 0; i < M; i++)
			for(int j = 0; j < N; j++)
				scanf("%d", &A[i][j]);
		// INITIALIZATION
		for(int i = 0; i < M; i++)
			d[i][N-1] = A[i][N-1];
		// DYNAMIC PROGRAMMING
		for(int j = N-2; j >= 0; j--)
			for(int i = 0; i < M; i++) {
				d[i][j] = INF;
				r[i][j] = M + 1;
				for(int k = -1; k <= 1; k++)
					if(A[i][j] + d[(i+k+M)%M][j+1] < d[i][j]) {
						d[i][j] = A[i][j] + d[(i+k+M)%M][j+1];
						r[i][j] = (i+k+M)%M + 1;
					}else if(A[i][j] + d[(i+k+M)%M][j+1] == d[i][j] && r[i][j] > (i+k+M)%M + 1)
						r[i][j] = (i+k+M)%M + 1;
			}
		long long ans = INF;
		int first = 0;
		for(int i = 0; i < M; i++)
			if(d[i][0] < ans) {
				first = i;
				ans = d[i][0];
			}
		// PRINT
		printf("%d", first+1);
		for(int i = 0; i < N-1; i++) {
			printf(" %d", r[first][i]);
			first = r[first][i] - 1;
		}
		printf("\n%lld\n", ans);
	}
	return 0;
}
